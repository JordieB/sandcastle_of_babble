import os
from typing import List, Optional
import PyPDF2
import pyttsx3
from pydub import AudioSegment


class PDFToAudio:
    """
    A class that converts PDF files to audio using the pyttsx3 text-to-speech
    converter.
    """

    def __init__(self, pdf_path: str, output_path: str):
        """
        Initializes PDFToAudio with paths for PDF and output files.

        Parameters:
        pdf_path (str): Path to the input PDF file.
        output_path (str): Path to the output MP3 file.
        """

        self.pdf_path = pdf_path
        self.output_path = output_path
        self.segments: List[AudioSegment] = []

    def generate_audio_files(self, start_page: Optional[int] = None,
                             end_page: Optional[int] = None):
        """
        Reads the PDF file, extracts the text, and converts each page to audio.

        Stores the audio files in the 'audio_files' directory.

        Parameters:
        start_page (int, optional): The starting page number for the conversion.
        end_page (int, optional): The ending page number for the conversion.
        """

        # Create the 'audio_files' directory if it doesn't exist
        if not os.path.exists('audio_files'):
            os.makedirs('audio_files')

        try:
            with open(self.pdf_path, 'rb') as pdf_file:
                read_pdf = PyPDF2.PdfFileReader(pdf_file)
                speaker = pyttsx3.init()

                total_pages = read_pdf.getNumPages()

                # If start_page or end_page are not provided, default to the
                # start and end of the PDF
                start_page = 0 if start_page is None else start_page
                end_page = total_pages if end_page is None else end_page

                for page_number in range(start_page, end_page):
                    text = read_pdf.getPage(page_number).extract_text()
                    print(f"Processing page {page_number + 1}/{total_pages}")
                    speaker.save_to_file(
                        text, f'audio_files/audio_{page_number}.mp3')
                    speaker.runAndWait()
        except Exception as e:
            print(f"An error occurred during PDF processing: {e}")
        else:
            print("PDF processing completed. "
                  "Now concatenating the audio files.")

    def concatenate_audio_files(self):
        """
        Concatenates the audio files generated by generate_audio_files into
        a single MP3 file using pydub.
        """

        try:
            audio_files = sorted(os.listdir('audio_files'))
            combined = AudioSegment.empty()

            for audio_file in audio_files:
                audio = AudioSegment.from_mp3(f'audio_files/{audio_file}')
                combined += audio

            combined.export(self.output_path, format='mp3')
        except Exception as e:
            print(f"An error occurred during audio concatenation: {e}")
        else:
            print(f"Audio concatenation completed. '{self.output_path}' is ready.")
